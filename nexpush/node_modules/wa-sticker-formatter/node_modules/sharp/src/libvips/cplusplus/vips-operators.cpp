// bodies for vips operations
// Mon Nov  1 03:31:09 PM CET 2021
// this file is generated automatically, do not edit!

VImage VImage::CMC2LCh( VOption *options ) const
{
    VImage out;

    call( "CMC2LCh",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::CMYK2XYZ( VOption *options ) const
{
    VImage out;

    call( "CMYK2XYZ",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::HSV2sRGB( VOption *options ) const
{
    VImage out;

    call( "HSV2sRGB",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LCh2CMC( VOption *options ) const
{
    VImage out;

    call( "LCh2CMC",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LCh2Lab( VOption *options ) const
{
    VImage out;

    call( "LCh2Lab",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::Lab2LCh( VOption *options ) const
{
    VImage out;

    call( "Lab2LCh",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::Lab2LabQ( VOption *options ) const
{
    VImage out;

    call( "Lab2LabQ",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::Lab2LabS( VOption *options ) const
{
    VImage out;

    call( "Lab2LabS",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::Lab2XYZ( VOption *options ) const
{
    VImage out;

    call( "Lab2XYZ",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LabQ2Lab( VOption *options ) const
{
    VImage out;

    call( "LabQ2Lab",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LabQ2LabS( VOption *options ) const
{
    VImage out;

    call( "LabQ2LabS",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LabQ2sRGB( VOption *options ) const
{
    VImage out;

    call( "LabQ2sRGB",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LabS2Lab( VOption *options ) const
{
    VImage out;

    call( "LabS2Lab",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::LabS2LabQ( VOption *options ) const
{
    VImage out;

    call( "LabS2LabQ",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::XYZ2CMYK( VOption *options ) const
{
    VImage out;

    call( "XYZ2CMYK",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::XYZ2Lab( VOption *options ) const
{
    VImage out;

    call( "XYZ2Lab",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::XYZ2Yxy( VOption *options ) const
{
    VImage out;

    call( "XYZ2Yxy",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::XYZ2scRGB( VOption *options ) const
{
    VImage out;

    call( "XYZ2scRGB",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::Yxy2XYZ( VOption *options ) const
{
    VImage out;

    call( "Yxy2XYZ",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::abs( VOption *options ) const
{
    VImage out;

    call( "abs",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::add( VImage right, VOption *options ) const
{
    VImage out;

    call( "add",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

VImage VImage::affine( std::vector<double> matrix, VOption *options ) const
{
    VImage out;

    call( "affine",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "matrix", matrix ) );

    return( out );
}

VImage VImage::analyzeload( const char *filename, VOption *options )
{
    VImage out;

    call( "analyzeload",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "filename", filename ) );

    return( out );
}

VImage VImage::arrayjoin( std::vector<VImage> in, VOption *options )
{
    VImage out;

    call( "arrayjoin",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "in", in ) );

    return( out );
}

VImage VImage::autorot( VOption *options ) const
{
    VImage out;

    call( "autorot",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

double VImage::avg( VOption *options ) const
{
    double out;

    call( "avg",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::bandbool( VipsOperationBoolean boolean, VOption *options ) const
{
    VImage out;

    call( "bandbool",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "boolean", boolean ) );

    return( out );
}

VImage VImage::bandfold( VOption *options ) const
{
    VImage out;

    call( "bandfold",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::bandjoin( std::vector<VImage> in, VOption *options )
{
    VImage out;

    call( "bandjoin",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "in", in ) );

    return( out );
}

VImage VImage::bandjoin_const( std::vector<double> c, VOption *options ) const
{
    VImage out;

    call( "bandjoin_const",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "c", c ) );

    return( out );
}

VImage VImage::bandmean( VOption *options ) const
{
    VImage out;

    call( "bandmean",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::bandrank( std::vector<VImage> in, VOption *options )
{
    VImage out;

    call( "bandrank",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "in", in ) );

    return( out );
}

VImage VImage::bandunfold( VOption *options ) const
{
    VImage out;

    call( "bandunfold",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::black( int width, int height, VOption *options )
{
    VImage out;

    call( "black",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

VImage VImage::boolean( VImage right, VipsOperationBoolean boolean, VOption *options ) const
{
    VImage out;

    call( "boolean",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right )->
            set( "boolean", boolean ) );

    return( out );
}

VImage VImage::boolean_const( VipsOperationBoolean boolean, std::vector<double> c, VOption *options ) const
{
    VImage out;

    call( "boolean_const",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "boolean", boolean )->
            set( "c", c ) );

    return( out );
}

VImage VImage::buildlut( VOption *options ) const
{
    VImage out;

    call( "buildlut",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::byteswap( VOption *options ) const
{
    VImage out;

    call( "byteswap",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::cache( VOption *options ) const
{
    VImage out;

    call( "cache",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::canny( VOption *options ) const
{
    VImage out;

    call( "canny",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::case_image( std::vector<VImage> cases, VOption *options ) const
{
    VImage out;

    call( "case",
        (options ? options : VImage::option())->
            set( "index", *this )->
            set( "out", &out )->
            set( "cases", cases ) );

    return( out );
}

VImage VImage::cast( VipsBandFormat format, VOption *options ) const
{
    VImage out;

    call( "cast",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "format", format ) );

    return( out );
}

VImage VImage::colourspace( VipsInterpretation space, VOption *options ) const
{
    VImage out;

    call( "colourspace",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "space", space ) );

    return( out );
}

VImage VImage::compass( VImage mask, VOption *options ) const
{
    VImage out;

    call( "compass",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::complex( VipsOperationComplex cmplx, VOption *options ) const
{
    VImage out;

    call( "complex",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "cmplx", cmplx ) );

    return( out );
}

VImage VImage::complex2( VImage right, VipsOperationComplex2 cmplx, VOption *options ) const
{
    VImage out;

    call( "complex2",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right )->
            set( "cmplx", cmplx ) );

    return( out );
}

VImage VImage::complexform( VImage right, VOption *options ) const
{
    VImage out;

    call( "complexform",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

VImage VImage::complexget( VipsOperationComplexget get, VOption *options ) const
{
    VImage out;

    call( "complexget",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "get", get ) );

    return( out );
}

VImage VImage::composite( std::vector<VImage> in, std::vector<int> mode, VOption *options )
{
    VImage out;

    call( "composite",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "in", in )->
            set( "mode", mode ) );

    return( out );
}

VImage VImage::composite2( VImage overlay, VipsBlendMode mode, VOption *options ) const
{
    VImage out;

    call( "composite2",
        (options ? options : VImage::option())->
            set( "base", *this )->
            set( "out", &out )->
            set( "overlay", overlay )->
            set( "mode", mode ) );

    return( out );
}

VImage VImage::conv( VImage mask, VOption *options ) const
{
    VImage out;

    call( "conv",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::conva( VImage mask, VOption *options ) const
{
    VImage out;

    call( "conva",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::convasep( VImage mask, VOption *options ) const
{
    VImage out;

    call( "convasep",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::convf( VImage mask, VOption *options ) const
{
    VImage out;

    call( "convf",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::convi( VImage mask, VOption *options ) const
{
    VImage out;

    call( "convi",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::convsep( VImage mask, VOption *options ) const
{
    VImage out;

    call( "convsep",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::copy( VOption *options ) const
{
    VImage out;

    call( "copy",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

double VImage::countlines( VipsDirection direction, VOption *options ) const
{
    double nolines;

    call( "countlines",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "nolines", &nolines )->
            set( "direction", direction ) );

    return( nolines );
}

VImage VImage::crop( int left, int top, int width, int height, VOption *options ) const
{
    VImage out;

    call( "crop",
        (options ? options : VImage::option())->
            set( "input", *this )->
            set( "out", &out )->
            set( "left", left )->
            set( "top", top )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

VImage VImage::csvload( const char *filename, VOption *options )
{
    VImage out;

    call( "csvload",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "filename", filename ) );

    return( out );
}

VImage VImage::csvload_source( VSource source, VOption *options )
{
    VImage out;

    call( "csvload_source",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "source", source ) );

    return( out );
}

void VImage::csvsave( const char *filename, VOption *options ) const
{
    call( "csvsave",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "filename", filename ) );
}

void VImage::csvsave_target( VTarget target, VOption *options ) const
{
    call( "csvsave_target",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "target", target ) );
}

VImage VImage::dE00( VImage right, VOption *options ) const
{
    VImage out;

    call( "dE00",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

VImage VImage::dE76( VImage right, VOption *options ) const
{
    VImage out;

    call( "dE76",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

VImage VImage::dECMC( VImage right, VOption *options ) const
{
    VImage out;

    call( "dECMC",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

double VImage::deviate( VOption *options ) const
{
    double out;

    call( "deviate",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::divide( VImage right, VOption *options ) const
{
    VImage out;

    call( "divide",
        (options ? options : VImage::option())->
            set( "left", *this )->
            set( "out", &out )->
            set( "right", right ) );

    return( out );
}

void VImage::draw_circle( std::vector<double> ink, int cx, int cy, int radius, VOption *options ) const
{
    call( "draw_circle",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "ink", ink )->
            set( "cx", cx )->
            set( "cy", cy )->
            set( "radius", radius ) );
}

void VImage::draw_flood( std::vector<double> ink, int x, int y, VOption *options ) const
{
    call( "draw_flood",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "ink", ink )->
            set( "x", x )->
            set( "y", y ) );
}

void VImage::draw_image( VImage sub, int x, int y, VOption *options ) const
{
    call( "draw_image",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "sub", sub )->
            set( "x", x )->
            set( "y", y ) );
}

void VImage::draw_line( std::vector<double> ink, int x1, int y1, int x2, int y2, VOption *options ) const
{
    call( "draw_line",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "ink", ink )->
            set( "x1", x1 )->
            set( "y1", y1 )->
            set( "x2", x2 )->
            set( "y2", y2 ) );
}

void VImage::draw_mask( std::vector<double> ink, VImage mask, int x, int y, VOption *options ) const
{
    call( "draw_mask",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "ink", ink )->
            set( "mask", mask )->
            set( "x", x )->
            set( "y", y ) );
}

void VImage::draw_rect( std::vector<double> ink, int left, int top, int width, int height, VOption *options ) const
{
    call( "draw_rect",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "ink", ink )->
            set( "left", left )->
            set( "top", top )->
            set( "width", width )->
            set( "height", height ) );
}

void VImage::draw_smudge( int left, int top, int width, int height, VOption *options ) const
{
    call( "draw_smudge",
        (options ? options : VImage::option())->
            set( "image", *this )->
            set( "left", left )->
            set( "top", top )->
            set( "width", width )->
            set( "height", height ) );
}

void VImage::dzsave( const char *filename, VOption *options ) const
{
    call( "dzsave",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "filename", filename ) );
}

VipsBlob *VImage::dzsave_buffer( VOption *options ) const
{
    VipsBlob *buffer;

    call( "dzsave_buffer",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "buffer", &buffer ) );

    return( buffer );
}

VImage VImage::embed( int x, int y, int width, int height, VOption *options ) const
{
    VImage out;

    call( "embed",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "x", x )->
            set( "y", y )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

VImage VImage::extract_area( int left, int top, int width, int height, VOption *options ) const
{
    VImage out;

    call( "extract_area",
        (options ? options : VImage::option())->
            set( "input", *this )->
            set( "out", &out )->
            set( "left", left )->
            set( "top", top )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

VImage VImage::extract_band( int band, VOption *options ) const
{
    VImage out;

    call( "extract_band",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "band", band ) );

    return( out );
}

VImage VImage::eye( int width, int height, VOption *options )
{
    VImage out;

    call( "eye",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

VImage VImage::falsecolour( VOption *options ) const
{
    VImage out;

    call( "falsecolour",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::fastcor( VImage ref, VOption *options ) const
{
    VImage out;

    call( "fastcor",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "ref", ref ) );

    return( out );
}

VImage VImage::fill_nearest( VOption *options ) const
{
    VImage out;

    call( "fill_nearest",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

int VImage::find_trim( int *top, int *width, int *height, VOption *options ) const
{
    int left;

    call( "find_trim",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "left", &left )->
            set( "top", top )->
            set( "width", width )->
            set( "height", height ) );

    return( left );
}

VImage VImage::fitsload( const char *filename, VOption *options )
{
    VImage out;

    call( "fitsload",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "filename", filename ) );

    return( out );
}

VImage VImage::fitsload_source( VSource source, VOption *options )
{
    VImage out;

    call( "fitsload_source",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "source", source ) );

    return( out );
}

void VImage::fitssave( const char *filename, VOption *options ) const
{
    call( "fitssave",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "filename", filename ) );
}

VImage VImage::flatten( VOption *options ) const
{
    VImage out;

    call( "flatten",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::flip( VipsDirection direction, VOption *options ) const
{
    VImage out;

    call( "flip",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "direction", direction ) );

    return( out );
}

VImage VImage::float2rad( VOption *options ) const
{
    VImage out;

    call( "float2rad",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::fractsurf( int width, int height, double fractal_dimension, VOption *options )
{
    VImage out;

    call( "fractsurf",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "width", width )->
            set( "height", height )->
            set( "fractal_dimension", fractal_dimension ) );

    return( out );
}

VImage VImage::freqmult( VImage mask, VOption *options ) const
{
    VImage out;

    call( "freqmult",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "mask", mask ) );

    return( out );
}

VImage VImage::fwfft( VOption *options ) const
{
    VImage out;

    call( "fwfft",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::gamma( VOption *options ) const
{
    VImage out;

    call( "gamma",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out ) );

    return( out );
}

VImage VImage::gaussblur( double sigma, VOption *options ) const
{
    VImage out;

    call( "gaussblur",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out", &out )->
            set( "sigma", sigma ) );

    return( out );
}

VImage VImage::gaussmat( double sigma, double min_ampl, VOption *options )
{
    VImage out;

    call( "gaussmat",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "sigma", sigma )->
            set( "min_ampl", min_ampl ) );

    return( out );
}

VImage VImage::gaussnoise( int width, int height, VOption *options )
{
    VImage out;

    call( "gaussnoise",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "width", width )->
            set( "height", height ) );

    return( out );
}

std::vector<double> VImage::getpoint( int x, int y, VOption *options ) const
{
    std::vector<double> out_array;

    call( "getpoint",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "out_array", &out_array )->
            set( "x", x )->
            set( "y", y ) );

    return( out_array );
}

VImage VImage::gifload( const char *filename, VOption *options )
{
    VImage out;

    call( "gifload",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "filename", filename ) );

    return( out );
}

VImage VImage::gifload_buffer( VipsBlob *buffer, VOption *options )
{
    VImage out;

    call( "gifload_buffer",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "buffer", buffer ) );

    return( out );
}

VImage VImage::gifload_source( VSource source, VOption *options )
{
    VImage out;

    call( "gifload_source",
        (options ? options : VImage::option())->
            set( "out", &out )->
            set( "source", source ) );

    return( out );
}

void VImage::gifsave( const char *filename, VOption *options ) const
{
    call( "gifsave",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "filename", filename ) );
}

VipsBlob *VImage::gifsave_buffer( VOption *options ) const
{
    VipsBlob *buffer;

    call( "gifsave_buffer",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "buffer", &buffer ) );

    return( buffer );
}

void VImage::gifsave_target( VTarget target, VOption *options ) const
{
    call( "gifsave_target",
        (options ? options : VImage::option())->
            set( "in", *this )->
            set( "target", ta